---
// Remove unused imports
// import { marked } from 'marked'
// import Markdown from '@astrojs/markdown-component'

// Add reference to generatedResume element
const generatedResume = 'generatedResume'
---

<!-- Add this script tag before your existing script -->
<script is:inline src='https://cdn.jsdelivr.net/npm/marked/marked.min.js'
></script>

<section id='resume' class='py-20 bg-gray-50 dark:bg-gray-900'>
  <div class='container mx-auto px-4'>
    <h2
      class='text-4xl font-bold text-gray-900 dark:text-white mb-8 text-center'
    >
      Interactive Resume Experience
    </h2>

    <!-- Initial Options -->
    <div class='grid md:grid-cols-2 gap-8 max-w-4xl mx-auto mb-12'>
      <a
        href='/RyanRoga_Resume.pdf'
        target='_blank'
        rel='noopener noreferrer'
        class='block'
      >
        <div
          class='bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 hover:shadow-xl transition-shadow'
        >
          <h3 class='text-2xl font-semibold text-gray-900 dark:text-white mb-4'>
            Traditional Resume
          </h3>
          <p class='text-gray-600 dark:text-gray-300'>
            View my standard resume in a traditional format, highlighting my
            experience, skills, and achievements.
          </p>
        </div>
      </a>

      <button id='aiResumeBtn' class='block text-left cursor-pointer'>
        <div
          class='bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 hover:shadow-xl transition-shadow relative'
        >
          <h3 class='text-2xl font-semibold text-gray-900 dark:text-white mb-4'>
            AI-Tailored Resume
          </h3>
          <p class='text-gray-600 dark:text-gray-300'>
            Upload a job posting to receive a customized resume that highlights
            my most relevant experience for the role.
          </p>
          <span
            class='absolute top-0 right-0 mt-2 mr-2 bg-yellow-500 text-white text-xs font-bold px-2 py-1 rounded-full'
          >
            NEW
          </span>
        </div>
      </button>
    </div>

    <!-- AI Resume Generator Section (Hidden by default) -->
    <div id='aiResumeSection' class='hidden max-w-4xl mx-auto'>
      <div class='bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 mb-8'>
        <h3 class='text-2xl font-semibold text-gray-900 dark:text-white mb-6'>
          Generate Tailored Resume
        </h3>
        <form id='jobPostingForm' class='space-y-6'>
          <div>
            <label
              for='jobPosting'
              class='block text-gray-700 dark:text-gray-300 mb-2'
            >
              Job Posting Description
            </label>
            <textarea
              id='jobPosting'
              name='jobPosting'
              rows='6'
              class='w-full px-4 py-3 rounded-lg bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 outline-none transition-colors disabled:opacity-50'
              placeholder='Paste the job posting here...'
              required></textarea>
          </div>
          <button
            type='submit'
            class='w-full md:w-auto px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-300 flex items-center justify-center gap-2'
          >
            <span>Generate Resume</span>
            <div class='hidden' id='loadingSpinner'>
              <div
                class='animate-spin h-5 w-5 border-2 border-white border-t-transparent rounded-full'
              >
              </div>
            </div>
          </button>
        </form>

        <!-- Terminal Output -->
        <div
          id='terminalOutput'
          class='hidden mt-6 bg-gray-900 rounded-lg overflow-hidden'
        >
          <div class='flex items-center px-4 py-2 bg-gray-800'>
            <div class='flex space-x-2'>
              <button
                class='w-3 h-3 bg-red-500 rounded-full hover:opacity-75'
                id='closeTerminal'></button>
              <button
                class='w-3 h-3 bg-yellow-500 rounded-full hover:opacity-75'
                id='minimizeTerminal'></button>
              <button
                class='w-3 h-3 bg-green-500 rounded-full hover:opacity-75'
                id='maximizeTerminal'></button>
            </div>
          </div>
          <div
            class='p-4 font-mono text-sm text-green-400 space-y-2'
            id='terminalContent'
          >
          </div>
        </div>

        <!-- Result Actions -->
        <div id='resultActions' class='mt-6 gap-4 hidden'>
          <button
            id='downloadBtn'
            class='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-300'
          >
            Download Results
          </button>
        </div>
      </div>

      <!-- Generated Resume Display -->
      <div
        id={generatedResume}
        class='mt-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 markdown-content dark:prose-invert max-w-none overflow-y-auto'
        style='max-height: 40vh;'
      >
        <!-- Content will be populated by JavaScript -->
      </div>
    </div>

    <!-- AI Chat Section -->
    <!-- <div class='max-w-4xl mx-auto mt-12'>
      <AIChatHistory />
    </div> -->
  </div>

  <style>
    .markdown-content {
      /* Basic text styling */
      line-height: 1.8;
      color: #e5e7eb; /* gray-200 - white-ish */

      /* Headers */
      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        margin-top: 1.5em;
        margin-bottom: 0.75em;
        font-weight: 700;
        line-height: 1.25;
        color: #f3f4f6; /* gray-100 - brighter white */
      }

      h1 {
        font-size: 2em;
      }
      h2 {
        font-size: 1.5em;
      }
      h3 {
        font-size: 1.25em;
      }

      /* Paragraphs and spacing */
      p {
        margin-bottom: 1.25em;
      }

      /* Lists */
      ul,
      ol {
        padding-left: 1.5em;
        margin-bottom: 1.25em;
      }

      li {
        margin-bottom: 0.5em;
        color: #e5e7eb; /* gray-200 */
      }

      /* Links */
      a {
        color: #60a5fa; /* blue-400 */
        text-decoration: none;
        transition: color 0.2s;
      }

      a:hover {
        color: #93c5fd; /* blue-300 */
        text-decoration: underline;
      }

      /* Blockquotes */
      blockquote {
        padding: 0.75em 1.25em;
        margin: 1.5em 0;
        border-left: 4px solid #4b5563; /* gray-600 */
        background-color: #374151; /* gray-700 */
        color: #d1d5db; /* gray-300 */
      }

      /* Code blocks if any */
      code {
        background-color: #1f2937; /* gray-800 */
        color: #e5e7eb; /* gray-200 */
        padding: 0.2em 0.4em;
        border-radius: 0.25em;
      }

      /* List markers */
      ul li::marker {
        color: #60a5fa; /* blue-400 */
      }

      /* Horizontal rules */
      hr {
        border-color: #4b5563; /* gray-600 */
      }
    }
  </style>

  <script>
    // Add type declaration for marked from CDN
    declare const marked: {
      parse: (text: string) => string
    }

    // Get DOM elements
    const generatedResumeElement = document.getElementById('generatedResume')
    const aiResumeBtn = document.getElementById('aiResumeBtn')
    const aiResumeSection = document.getElementById('aiResumeSection')

    // Remove unused interface
    // interface ErrorWithType {
    //   error?: {
    //     type?: string
    //   }
    // }

    // Initialize animationInterval
    let animationInterval: ReturnType<typeof setInterval> | undefined =
      undefined

    if (aiResumeBtn && aiResumeSection) {
      aiResumeBtn.addEventListener('click', () => {
        aiResumeSection.classList.remove('hidden')
        aiResumeSection.scrollIntoView({ behavior: 'smooth' })
      })
    }

    const jobPostingForm = document.getElementById(
      'jobPostingForm'
    ) as HTMLFormElement
    const jobPostingTextarea = document.getElementById(
      'jobPosting'
    ) as HTMLTextAreaElement
    const loadingSpinner = document.getElementById('loadingSpinner')
    const terminalOutput = document.getElementById('terminalOutput')
    const terminalContent = document.getElementById('terminalContent')
    const closeTerminal = document.getElementById('closeTerminal')
    const resultActions = document.getElementById('resultActions')
    const downloadBtn = document.getElementById('downloadBtn')
    const minimizeTerminal = document.getElementById('minimizeTerminal')

    let generatedContent = ''
    let accumulatedContent = ''
    let dotCount = 0

    const addTerminalMessage = (message: string) => {
      if (terminalContent) {
        const line = document.createElement('div')
        line.textContent = `> ${message}`
        terminalContent.appendChild(line)
        line.scrollIntoView({ behavior: 'smooth' })
      }
    }

    const updateGeneratingMessage = () => {
      if (terminalContent) {
        // Get the last line if it's a generating message
        const lastLine = terminalContent.lastElementChild
        if (lastLine?.textContent?.startsWith('> Generating')) {
          // Update existing generating line
          lastLine.textContent = `> Generating${'.'.repeat(dotCount)}`
          lastLine.scrollIntoView({ behavior: 'smooth' })
        } else {
          // Add new generating line
          const line = document.createElement('div')
          line.textContent = `> Generating${'.'.repeat(dotCount)}`
          terminalContent.appendChild(line)
          line.scrollIntoView({ behavior: 'smooth' })
        }
        dotCount = (dotCount + 1) % 4 // Loop from 0 to 3
      }
    }

    if (closeTerminal) {
      closeTerminal.addEventListener('click', () => {
        if (terminalOutput) {
          terminalOutput.classList.add('hidden')
          if (terminalContent) {
            terminalContent.innerHTML = ''
          }
        }
      })
    }

    if (jobPostingForm) {
      jobPostingForm.addEventListener('submit', async (e) => {
        e.preventDefault()

        // Reset displays
        if (terminalContent) terminalContent.innerHTML = ''
        if (terminalOutput) terminalOutput.classList.remove('hidden')
        if (resultActions) resultActions.classList.add('hidden')
        if (generatedResumeElement) {
          generatedResumeElement.innerHTML = ''
          generatedResumeElement.classList.remove('hidden')
        }
        accumulatedContent = ''

        try {
          addTerminalMessage('Starting resume generation with Claude...')

          // Start the animation
          animationInterval = setInterval(updateGeneratingMessage, 500)

          const response = await fetch('/api/generate-resume', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              jobPosting: jobPostingTextarea.value,
            }),
          })

          if (!response.ok) {
            const errorData = await response.json()

            // Clear the animation interval
            if (animationInterval) clearInterval(animationInterval)

            // Remove the last "Generating..." line
            if (
              terminalContent?.lastElementChild?.textContent?.startsWith(
                '> Generating'
              )
            ) {
              terminalContent.removeChild(terminalContent.lastElementChild)
            }

            if (errorData.error?.type === 'overloaded_error') {
              addTerminalMessage('Claude AI is currently overloaded.')
              addTerminalMessage('Would you like to try using OpenAI instead?')

              // Create and show retry button with OpenAI
              const retryDiv = document.createElement('div')
              retryDiv.className = 'mt-4 flex gap-4'
              retryDiv.innerHTML = `
                <button id="retryWithOpenAI" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-300">
                  Try with OpenAI
                </button>
                <button id="cancelGeneration" class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors duration-300">
                  Cancel
                </button>
              `
              terminalContent?.appendChild(retryDiv)

              // Add event listeners for the new buttons
              document
                .getElementById('retryWithOpenAI')
                ?.addEventListener('click', async () => {
                  retryDiv.remove()
                  addTerminalMessage('Retrying with OpenAI...')

                  // Just await the fetch without storing response
                  await fetch('/api/generate-resume', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                      jobPosting: jobPostingTextarea.value,
                      useOpenAI: true,
                    }),
                  })
                })

              document
                .getElementById('cancelGeneration')
                ?.addEventListener('click', () => {
                  retryDiv.remove()
                  addTerminalMessage('Generation cancelled.')
                  if (loadingSpinner) loadingSpinner.classList.add('hidden')
                  jobPostingTextarea.disabled = false
                  document.body.style.cursor = 'default'
                })

              return
            }
            throw new Error('Failed to generate resume')
          }

          // Get the response as a text stream
          const reader = response.body?.getReader()
          const decoder = new TextDecoder()

          if (reader) {
            while (true) {
              const { done, value } = await reader.read()
              if (done) break

              const chunk = decoder.decode(value)
              accumulatedContent += chunk

              // Now marked should be available globally
              if (generatedResumeElement) {
                const htmlContent = marked.parse(accumulatedContent)
                generatedResumeElement.innerHTML = htmlContent

                // Auto-scroll if near bottom
                const isNearBottom =
                  generatedResumeElement.scrollHeight -
                    generatedResumeElement.scrollTop -
                    generatedResumeElement.clientHeight <
                  100

                if (isNearBottom) {
                  generatedResumeElement.scrollTop =
                    generatedResumeElement.scrollHeight
                }
              }
            }
          }

          // Clear the animation and show completion
          clearInterval(animationInterval)
          // Remove the last "Generating..." line
          if (
            terminalContent?.lastElementChild?.textContent?.startsWith(
              '> Generating'
            )
          ) {
            terminalContent.removeChild(terminalContent.lastElementChild)
          }
          addTerminalMessage('Generation complete!')

          // Show final actions
          if (resultActions) {
            resultActions.classList.remove('hidden')
            resultActions.classList.add('flex')
          }

          // Store the generated content for download/view
          generatedContent = accumulatedContent
        } catch (error: unknown) {
          // Clear the animation interval
          if (animationInterval) {
            clearInterval(animationInterval)
            animationInterval = undefined
          }
          // Remove the last "Generating..." line
          if (
            terminalContent?.lastElementChild?.textContent?.startsWith(
              '> Generating'
            )
          ) {
            terminalContent.removeChild(terminalContent.lastElementChild)
          }
          const errorMessage =
            error instanceof Error ? error.message : 'Unknown error'
          addTerminalMessage(`Error: ${errorMessage}`)
          if (generatedResumeElement) {
            generatedResumeElement.innerHTML =
              '<p class="text-red-500">Error generating content. Please try again.</p>'
          }
        } finally {
          // Re-enable form and hide loading state
          jobPostingTextarea.disabled = false
          document.body.style.cursor = 'default'
          if (loadingSpinner) loadingSpinner.classList.add('hidden')
        }
      })
    }

    if (downloadBtn) {
      downloadBtn.addEventListener('click', () => {
        // Format the content for download - preserve markdown formatting
        const cleanContent = generatedContent
          .replace(/<br\s*\/?>/gi, '\n') // Replace <br> tags with newlines
          .replace(/<div[^>]*>(.*?)<\/div>/g, '$1') // Remove div tags but keep content
          .replace(/<\/?[^>]+(>|$)/g, '') // Remove any other HTML tags
          .replace(/\n\s*\n\s*\n/g, '\n\n') // Normalize multiple line breaks
          .trim() // Remove leading/trailing whitespace

        const blob = new Blob([cleanContent], { type: 'text/markdown' })
        const url = URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = 'tailored-resume.md'
        document.body.appendChild(a)
        a.click()
        document.body.removeChild(a)
        URL.revokeObjectURL(url)
      })
    }

    if (minimizeTerminal && terminalContent) {
      minimizeTerminal.addEventListener('click', () => {
        terminalContent.classList.toggle('hidden')
      })
    }

    // Add maximize functionality
    const maximizeTerminal = document.getElementById('maximizeTerminal')
    const terminalContainer = document.getElementById('terminalOutput')

    if (maximizeTerminal && terminalContainer) {
      maximizeTerminal.addEventListener('click', () => {
        terminalContainer.classList.toggle('fixed')
        terminalContainer.classList.toggle('inset-4')
        terminalContainer.classList.toggle('z-50')
        terminalContainer.classList.toggle('m-4')
      })
    }
  </script>
</section>
