---
const generatedResume = 'generatedResume'
---

<script is:inline src='https://cdn.jsdelivr.net/npm/marked/marked.min.js'
></script>

<section
  id='resume'
  class='py-20 bg-gray-50 dark:bg-gray-900'
  aria-labelledby='resume-heading'
>
  <div class='container mx-auto px-4'>
    <h2
      id='resume-heading'
      class='text-4xl font-bold text-gray-900 dark:text-white mb-8 text-center'
    >
      Interactive Resume Experience
    </h2>

    <div class='grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl mx-auto mb-12'>
      <a
        href='/RyanRoga_Resume.pdf'
        target='_blank'
        rel='noopener noreferrer'
        class='block'
        aria-label='View traditional resume PDF'
      >
        <div
          class='bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 hover:shadow-xl transition-shadow'
        >
          <h3 class='text-2xl font-semibold text-gray-900 dark:text-white mb-4'>
            Traditional Resume
          </h3>
          <p class='text-gray-600 dark:text-gray-300'>
            View my standard resume in a traditional format, highlighting my
            experience, skills, and achievements.
          </p>
        </div>
      </a>

      <button
        id='aiResumeBtn'
        class='block text-left cursor-pointer'
        aria-expanded='false'
        aria-controls='aiResumeSection'
      >
        <div
          class='bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 hover:shadow-xl transition-shadow relative'
        >
          <h3 class='text-2xl font-semibold text-gray-900 dark:text-white mb-4'>
            AI-Tailored Resume
          </h3>
          <p class='text-gray-600 dark:text-gray-300'>
            Upload a job posting to receive a customized resume that highlights
            my most relevant experience for the role.
          </p>
          <span
            class='absolute top-0 right-0 mt-2 mr-2 bg-yellow-500 text-white text-xs font-bold px-2 py-1 rounded-full'
            aria-label='New feature'
          >
            NEW
          </span>
        </div>
      </button>
    </div>

    <div
      id='aiResumeSection'
      class='hidden max-w-4xl mx-auto'
      aria-hidden='true'
    >
      <div class='bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 mb-8'>
        <h3 class='text-2xl font-semibold text-gray-900 dark:text-white mb-6'>
          Generate Tailored Resume
        </h3>
        <form id='jobPostingForm' class='space-y-6'>
          <div>
            <label
              for='jobPosting'
              class='block text-gray-700 dark:text-gray-300 mb-2'
            >
              Job Posting Description
            </label>
            <textarea
              id='jobPosting'
              name='jobPosting'
              rows='6'
              class='w-full px-4 py-3 rounded-lg bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 outline-none transition-colors disabled:opacity-50'
              placeholder='Paste the job posting here...'
              required
              aria-describedby='jobPostingHelp'></textarea>
          </div>
          <button
            type='submit'
            class='w-full md:w-auto px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-300 flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed'
          >
            <span>Generate Resume</span>
            <div class='hidden' id='loadingSpinner' aria-hidden='true'>
              <div
                class='animate-spin h-5 w-5 border-2 border-white border-t-transparent rounded-full'
              >
              </div>
            </div>
          </button>
        </form>

        <div
          id='terminalOutput'
          class='hidden mt-6 bg-gray-900 rounded-lg overflow-hidden'
          role='log'
          aria-live='polite'
        >
          <div class='flex items-center px-4 py-2 bg-gray-800'>
            <div class='flex space-x-2'>
              <button
                class='w-3 h-3 bg-red-500 rounded-full hover:opacity-75'
                id='closeTerminal'
                aria-label='Close terminal'></button>
              <button
                class='w-3 h-3 bg-yellow-500 rounded-full hover:opacity-75'
                id='minimizeTerminal'
                aria-label='Minimize terminal'></button>
              <button
                class='w-3 h-3 bg-green-500 rounded-full hover:opacity-75'
                id='maximizeTerminal'
                aria-label='Maximize terminal'></button>
            </div>
          </div>
          <div
            class='p-4 font-mono text-sm text-green-400 space-y-2'
            id='terminalContent'
          >
          </div>
        </div>
      </div>

      <div
        id={generatedResume}
        class='mt-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 markdown-content dark:prose-invert max-w-none overflow-y-auto hidden'
        style='max-height: 40vh;'
        aria-live='polite'
      >
      </div>
    </div>

    <div id='resultActions' class='mt-4 text-right hidden'>
      <button
        id='downloadBtn'
        class='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-300 shadow-lg mx-auto'
      >
        Download Resume
      </button>
    </div>
  </div>

  <style>
    .markdown-content {
      line-height: 1.8;
      @apply prose prose-lg dark:prose-invert max-w-none;

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        @apply mt-6 mb-3 font-bold leading-tight text-gray-900 dark:text-gray-100;
      }

      h1 {
        @apply text-4xl;
      }
      h2 {
        @apply text-3xl;
      }
      h3 {
        @apply text-2xl;
      }

      p {
        @apply mb-5;
      }

      ul,
      ol {
        @apply pl-6 mb-5;
      }

      li {
        @apply mb-2 text-gray-800 dark:text-gray-200;
      }

      a {
        @apply text-blue-500 no-underline transition-colors hover:text-blue-400 hover:underline;
      }

      blockquote {
        @apply p-3 my-6 border-l-4 border-gray-600 bg-gray-800 text-gray-300;
      }

      code {
        @apply bg-gray-800 text-gray-200 px-2 py-1 rounded;
      }

      ul li::marker {
        @apply text-blue-500;
      }

      hr {
        @apply border-gray-600;
      }
    }

    #terminalContent {
      text-shadow:
        0 0 5px #3b82f6,
        0 0 10px #3b82f6,
        0 0 15px #3b82f6;
      animation: glow 1s ease-in-out infinite alternate;
    }

    #terminalContent div {
      @apply mb-2 transition-all duration-300;
    }

    #terminalContent div:has(span.error) {
      @apply text-red-500;
      text-shadow:
        0 0 5px #ef4444,
        0 0 10px #ef4444;
    }

    #terminalContent div:has(span.success) {
      @apply text-green-500;
      text-shadow:
        0 0 5px #22c55e,
        0 0 10px #22c55e;
    }

    #terminalContent div:has(span.info) {
      @apply text-blue-400;
      text-shadow:
        0 0 5px #60a5fa,
        0 0 10px #60a5fa;
    }

    @keyframes glow {
      from {
        text-shadow:
          0 0 5px #3b82f6,
          0 0 10px #3b82f6;
      }
      to {
        text-shadow:
          0 0 7px #3b82f6,
          0 0 14px #3b82f6;
      }
    }

    #terminalOutput {
      @apply bg-gradient-to-br from-gray-900 to-gray-800 border border-blue-500;
      box-shadow:
        0 0 5px #3b82f6,
        inset 0 0 5px #3b82f6;
    }

    #terminalOutput > div:first-child {
      @apply bg-gradient-to-r from-gray-800 to-gray-900 border-b border-blue-500;
    }

    #terminalOutput button {
      @apply transition-all duration-300;
    }

    #terminalOutput button:hover {
      box-shadow: 0 0 5px currentColor;
    }
  </style>

  <script>
    type ProcessStage = {
      working: string
      complete: string
    }

    type MarkedOptions = {
      gfm: boolean
      breaks: boolean
    }

    declare const marked: {
      parse: (text: string, options?: MarkedOptions) => string
    }

    const generatedResumeElement = document.getElementById('generatedResume')
    const aiResumeBtn = document.getElementById('aiResumeBtn')
    const aiResumeSection = document.getElementById('aiResumeSection')
    let animationInterval: NodeJS.Timeout | undefined

    const setupAIResumeButton = (): void => {
      if (!aiResumeBtn || !aiResumeSection) return

      aiResumeBtn.addEventListener('click', () => {
        const isExpanded = aiResumeSection.classList.contains('hidden')
        aiResumeBtn.setAttribute('aria-expanded', (!isExpanded).toString())
        aiResumeSection.classList.toggle('hidden')
        aiResumeSection.setAttribute('aria-hidden', isExpanded.toString())
        if (!isExpanded) {
          aiResumeSection.scrollIntoView({ behavior: 'smooth' })
        }
      })
    }

    setupAIResumeButton()

    const jobPostingForm = document.getElementById(
      'jobPostingForm'
    ) as HTMLFormElement
    const jobPostingTextarea = document.getElementById(
      'jobPosting'
    ) as HTMLTextAreaElement
    const loadingSpinner = document.getElementById('loadingSpinner')
    const terminalOutput = document.getElementById('terminalOutput')
    const terminalContent = document.getElementById('terminalContent')
    const closeTerminal = document.getElementById('closeTerminal')
    const resultActions = document.getElementById('resultActions')
    const downloadBtn = document.getElementById('downloadBtn')
    const minimizeTerminal = document.getElementById('minimizeTerminal')

    let generatedContent = ''
    let accumulatedContent = ''
    let dotCount = 0

    const processStages: ProcessStage[] = [
      {
        working: 'Validating job description',
        complete: 'Job posting validated ✔️',
      },
      {
        working: 'Analyzing job requirements',
        complete: 'Requirements analysis complete ✔️',
      },
      {
        working: 'Checking compatibility',
        complete: 'Compatibility check passed ✔️',
      },
      { working: 'Generating resume', complete: 'Generation complete! ✔️' },
    ]

    let currentStageIndex = 0

    const addTerminalMessage = (
      message: string,
      type: 'info' | 'success' | 'error' = 'info',
      isWorking = false
    ): void => {
      if (!terminalContent) return

      const id = isWorking ? 'current-working-stage' : ''
      const line = document.createElement('div')
      line.id = id
      line.innerHTML = `<span class="${type}">></span> ${message}${isWorking ? '.'.repeat(dotCount) : ''}`

      const existingWorking = document.getElementById('current-working-stage')
      if (existingWorking && isWorking) {
        existingWorking.replaceWith(line)
      } else {
        terminalContent.appendChild(line)
      }

      line.scrollIntoView({ behavior: 'smooth' })
    }

    const updateWorkingAnimation = () => {
      if (currentStageIndex >= processStages.length) return

      const currentStage = processStages[currentStageIndex]
      dotCount = (dotCount + 1) % 4
      addTerminalMessage(currentStage.working, 'info', true)
    }

    const completeCurrentStage = () => {
      if (currentStageIndex >= processStages.length) return

      // Remove the working message
      const workingMessage = document.getElementById('current-working-stage')
      if (workingMessage) {
        workingMessage.remove()
      }

      // Add completion message
      const currentStage = processStages[currentStageIndex]
      addTerminalMessage(currentStage.complete, 'success')
      currentStageIndex++
    }

    const showError = (stage: string, error: string) => {
      // Remove any working message
      const workingMessage = document.getElementById('current-working-stage')
      if (workingMessage) {
        workingMessage.remove()
      }

      addTerminalMessage(`${stage} failed`, 'error')
      addTerminalMessage(`Error: ${error}`, 'error')
    }

    if (closeTerminal) {
      closeTerminal.addEventListener('click', () => {
        if (terminalOutput) {
          terminalOutput.classList.add('hidden')
          if (terminalContent) {
            terminalContent.innerHTML = ''
          }
        }
      })
    }

    if (jobPostingForm) {
      jobPostingForm.addEventListener('submit', async (e) => {
        e.preventDefault()
        currentStageIndex = 0
        dotCount = 0

        // Reset UI state
        if (terminalContent) terminalContent.innerHTML = ''
        if (terminalOutput) terminalOutput.classList.remove('hidden')
        if (resultActions) resultActions.classList.add('hidden')
        if (generatedResumeElement) {
          generatedResumeElement.innerHTML = ''
          generatedResumeElement.classList.add('hidden')
        }

        try {
          // Start the working animation
          if (!animationInterval) {
            animationInterval = setInterval(updateWorkingAnimation, 500)
          }

          // Step 1: Validate
          addTerminalMessage(processStages[0].working, 'info', true)
          const validateResponse = await fetch(
            '/api/validate-job-description',
            {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ jobPosting: jobPostingTextarea.value }),
            }
          )

          if (!validateResponse.ok) {
            clearInterval(animationInterval)
            const error = await validateResponse.json()
            showError('Validation', error.message)
            return
          }

          completeCurrentStage()

          // Step 2: Analyze job requirements
          addTerminalMessage(processStages[1].working, 'info', true)
          const analyzeResponse = await fetch('/api/analyze-job-requirements', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ jobPosting: jobPostingTextarea.value }),
          })

          if (!analyzeResponse.ok) {
            const error = await analyzeResponse.json()
            showError('Analysis', error.message)
            return
          }

          const { simplifiedDescription } = await analyzeResponse.json()
          completeCurrentStage()

          // Step 3: Check conflicts
          addTerminalMessage(processStages[2].working, 'info', true)
          const conflictResponse = await fetch('/api/check-conflicts', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ simplifiedDescription }),
          })

          if (!conflictResponse.ok) {
            const error = await conflictResponse.json()
            showError('Compatibility Check', error.message)
            return
          }

          completeCurrentStage()

          // Step 4: Generate resume
          addTerminalMessage(processStages[3].working, 'info', true)

          if (generatedResumeElement) {
            generatedResumeElement.classList.remove('hidden')
          }

          animationInterval = setInterval(updateWorkingAnimation, 500)

          const response = await fetch('/api/generate-resume', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ jobPosting: jobPostingTextarea.value }),
          })

          if (!response.ok) {
            const errorData = await response.json()
            clearInterval(animationInterval)

            if (
              terminalContent?.lastElementChild?.textContent?.startsWith(
                '> Generating'
              )
            ) {
              terminalContent.removeChild(terminalContent.lastElementChild)
            }

            if (errorData.error?.type === 'overloaded_error') {
              showError(
                'Resume Generation',
                'Claude AI is currently overloaded'
              )
              addTerminalMessage(
                'Stream disconnected due to high demand',
                'error'
              )
              addTerminalMessage('Please try again in a few minutes', 'info')
              addTerminalMessage('You can:', 'info')

              const optionsDiv = document.createElement('div')
              optionsDiv.className = 'mt-4 flex flex-col gap-2'
              optionsDiv.innerHTML = `
                <button id="retryGeneration" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-300">
                  Try Again
                </button>
                <button id="cancelGeneration" class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors duration-300">
                  Cancel
                </button>
              `

              terminalContent?.appendChild(optionsDiv)

              document
                .getElementById('retryGeneration')
                ?.addEventListener('click', () => {
                  jobPostingForm?.dispatchEvent(new Event('submit'))
                })

              document
                .getElementById('cancelGeneration')
                ?.addEventListener('click', () => {
                  if (terminalOutput) terminalOutput.classList.add('hidden')
                  if (terminalContent) terminalContent.innerHTML = ''
                })

              return
            }

            showError(
              'Resume Generation',
              errorData.error?.message || 'Unknown error'
            )
            addTerminalMessage('Please try again later.', 'error')
            return
          }

          const reader = response.body?.getReader()
          const decoder = new TextDecoder()

          if (reader) {
            while (true) {
              const { done, value } = await reader.read()
              if (done) break

              const chunk = decoder.decode(value)
              accumulatedContent += chunk

              if (generatedResumeElement) {
                const htmlContent = marked.parse(accumulatedContent, {
                  gfm: true,
                  breaks: true,
                })
                generatedResumeElement.innerHTML = htmlContent

                const isNearBottom =
                  generatedResumeElement.scrollHeight -
                    generatedResumeElement.scrollTop -
                    generatedResumeElement.clientHeight <
                  100

                if (isNearBottom) {
                  generatedResumeElement.scrollTop =
                    generatedResumeElement.scrollHeight
                }
              }
            }
          }

          clearInterval(animationInterval)
          if (
            terminalContent?.lastElementChild?.textContent?.startsWith(
              '> Generating'
            )
          ) {
            terminalContent.removeChild(terminalContent.lastElementChild)
          }
          completeCurrentStage()

          generatedContent = accumulatedContent

          if (resultActions) {
            resultActions.classList.remove('hidden')
            resultActions.classList.add('flex')
          }
        } catch (error) {
          if (animationInterval) {
            clearInterval(animationInterval)
          }

          if (
            terminalContent?.lastElementChild?.textContent?.startsWith(
              '> Generating'
            )
          ) {
            terminalContent.removeChild(terminalContent.lastElementChild)
          }

          showError(
            'Process',
            error instanceof Error ? error.message : 'Unknown error'
          )
          addTerminalMessage(
            'Please try again. If the problem persists, contact support.',
            'error'
          )

          if (generatedResumeElement) {
            generatedResumeElement.classList.add('hidden')
          }
        } finally {
          jobPostingTextarea.disabled = false
          document.body.style.cursor = 'default'
          if (loadingSpinner) loadingSpinner.classList.add('hidden')
        }
      })
    }

    if (downloadBtn) {
      downloadBtn.addEventListener('click', () => {
        const cleanContent = generatedContent
          .replace(/<br\s*\/?>/gi, '\n')
          .replace(/<div[^>]*>(.*?)<\/div>/g, '$1')
          .replace(/<\/?[^>]+(>|$)/g, '')
          .replace(/\n\s*\n\s*\n/g, '\n\n')
          .trim()

        const blob = new Blob([cleanContent], { type: 'text/markdown' })
        const url = URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = 'tailored-resume.md'
        document.body.appendChild(a)
        a.click()
        document.body.removeChild(a)
        URL.revokeObjectURL(url)
      })
    }

    if (minimizeTerminal && terminalContent) {
      minimizeTerminal.addEventListener('click', () => {
        terminalContent.classList.toggle('hidden')
      })
    }

    const maximizeTerminal = document.getElementById('maximizeTerminal')
    const terminalContainer = document.getElementById('terminalOutput')

    if (maximizeTerminal && terminalContainer) {
      maximizeTerminal.addEventListener('click', () => {
        terminalContainer.classList.toggle('fixed')
        terminalContainer.classList.toggle('inset-4')
        terminalContainer.classList.toggle('z-50')
        terminalContainer.classList.toggle('m-4')
      })
    }
  </script>
</section>
