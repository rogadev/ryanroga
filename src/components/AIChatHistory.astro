---

---

<div
  class='bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8'
  role='region'
  aria-label='AI Chat Interface'
>
  <h2
    class='text-2xl font-semibold text-gray-900 dark:text-white mb-6'
    id='chatTitle'
  >
    Chat with AI about Ryan's Experience
  </h2>

  <!-- Registration Form -->
  <form id='chatRegistration' class='space-y-6' aria-labelledby='chatTitle'>
    <!-- Name and Phone in one row -->
    <div class='grid grid-cols-1 md:grid-cols-3 gap-4'>
      <div class='md:col-span-2'>
        <label
          for='visitorName'
          class='block text-gray-700 dark:text-gray-300 mb-2'>Name</label
        >
        <input
          type='text'
          id='visitorName'
          name='visitorName'
          class='w-full px-4 py-3 rounded-lg bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 outline-none transition-colors'
          required
        />
      </div>
      <div>
        <label
          for='visitorPhone'
          class='block text-gray-700 dark:text-gray-300 mb-2'>Phone</label
        >
        <input
          type='tel'
          id='visitorPhone'
          name='visitorPhone'
          pattern='[(]?[0-9]{3}[)]?[-\s]?[0-9]{3}[-\s]?[0-9]{4}'
          class='w-full px-4 py-3 rounded-lg bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 outline-none transition-colors'
          required
        />
        <small class='text-gray-500 dark:text-gray-400 text-sm'
          >1 (555) 555-5555</small
        >
      </div>
    </div>

    <!-- Email full width -->
    <div>
      <label
        for='visitorEmail'
        class='block text-gray-700 dark:text-gray-300 mb-2'>Email</label
      >
      <input
        type='email'
        id='visitorEmail'
        name='visitorEmail'
        class='w-full px-4 py-3 rounded-lg bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 outline-none transition-colors'
        required
      />
    </div>

    <button
      type='submit'
      class='w-full md:w-auto px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-300 disabled:opacity-50'
      data-loading='false'
    >
      <span class='inline-flex items-center'>
        <span>Start Chat</span>
        <span class='loading-spinner hidden ml-2'>...</span>
      </span>
    </button>
  </form>

  <!-- Chat Interface -->
  <div id='chatInterface' class='hidden space-y-4' aria-live='polite'>
    <!-- Welcome Message -->
    <div
      id='welcomeMessage'
      class='bg-blue-50 dark:bg-blue-900/30 p-4 rounded-lg'
    >
      <p class='text-gray-700 dark:text-gray-300'>
        Hello! I'm an AI assistant who can tell you all about Ryan's experience,
        skills, and projects. What would you like to know?
      </p>
    </div>

    <!-- Chat History -->
    <div
      id='chatHistory'
      class='h-[calc(100vh-24rem)] min-h-[20rem] max-h-96 overflow-y-auto space-y-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg scroll-smooth'
      aria-label='Chat messages'
      role='log'
    >
      <!-- Messages will be inserted here -->
    </div>

    <!-- Chat Input -->
    <form id='chatForm' class='flex flex-col sm:flex-row gap-4'>
      <input
        type='text'
        id='messageInput'
        class='flex-1 px-4 py-3 rounded-lg bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 outline-none transition-colors'
        placeholder="Ask about Ryan's experience..."
        aria-label='Message input'
      />
      <button
        type='submit'
        class='w-full sm:w-auto px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-300 disabled:opacity-50 flex items-center justify-center gap-2'
        aria-label='Send message'
      >
        <span>Send</span>
        <svg
          class='w-4 h-4'
          fill='none'
          stroke='currentColor'
          viewBox='0 0 24 24'
        >
          <path
            stroke-linecap='round'
            stroke-linejoin='round'
            stroke-width='2'
            d='M14 5l7 7m0 0l-7 7m7-7H3'></path>
        </svg>
      </button>
    </form>

    <!-- End Chat Button -->
    <button
      id='endChatBtn'
      class='w-full mt-4 px-8 py-3 bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors duration-300'
    >
      End Conversation
    </button>
  </div>
</div>

<script>
  interface Visitor {
    name: string
    email: string
    phone: string
  }

  interface ChatMessage {
    role: 'user' | 'assistant'
    content: string
    timestamp: Date
  }

  let visitor: Visitor | null = null
  let chatHistory: ChatMessage[] = []

  function formatTimestamp(date: Date): string {
    return date.toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
    })
  }

  function addMessageToChat(message: ChatMessage) {
    const chatHistoryDiv = document.getElementById('chatHistory')
    if (!chatHistoryDiv) return

    const messageElement = document.createElement('div')
    messageElement.className = `flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`

    const messageContent = document.createElement('div')
    messageContent.className = `max-w-[80%] p-4 rounded-lg ${
      message.role === 'user'
        ? 'bg-blue-600 text-white'
        : 'bg-gray-200 dark:bg-gray-600 text-gray-900 dark:text-gray-100'
    }`

    // Replace newlines with <br> tags and preserve whitespace
    const formattedContent = message.content.replace(/\n/g, '<br>')
    messageContent.innerHTML = `
            <p class="whitespace-pre-line">${formattedContent}</p>
            <span class="text-xs opacity-70 ${message.role === 'user' ? 'text-blue-100' : 'text-gray-600 dark:text-gray-300'}">
                ${formatTimestamp(message.timestamp)}
            </span>
        `

    messageElement.appendChild(messageContent)
    chatHistoryDiv.appendChild(messageElement)
    chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight
  }

  async function handleChatEnd() {
    if (!visitor || chatHistory.length === 0) return

    try {
      // Send chat history to your backend
      const response = await fetch('/api/chat-history', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          visitor,
          chatHistory,
        }),
      })

      if (response.ok) {
        // Reset the chat
        chatHistory = []
        visitor = null
        document.getElementById('chatInterface')?.classList.add('hidden')
        document.getElementById('chatRegistration')?.classList.remove('hidden')

        // Clear the chat history display
        const chatHistoryDiv = document.getElementById('chatHistory')
        if (chatHistoryDiv) chatHistoryDiv.innerHTML = ''
      }
    } catch (error) {
      console.error('Failed to save chat history:', error)
    }
  }

  // Event Listeners
  document
    .getElementById('chatRegistration')
    ?.addEventListener('submit', (e) => {
      e.preventDefault()

      const form = e.target as HTMLFormElement
      const formData = new FormData(form)

      visitor = {
        name: formData.get('visitorName') as string,
        email: formData.get('visitorEmail') as string,
        phone: formData.get('visitorPhone') as string,
      }

      document.getElementById('chatRegistration')?.classList.add('hidden')
      document.getElementById('chatInterface')?.classList.remove('hidden')
    })

  function updateLoadingState(isLoading: boolean) {
    const buttons = document.querySelectorAll('button[type="submit"]')
    buttons.forEach((button) => {
      button.disabled = isLoading
      button.setAttribute('data-loading', isLoading.toString())
      const spinner = button.querySelector('.loading-spinner')
      if (spinner) {
        spinner.classList.toggle('hidden', !isLoading)
      }
    })
  }

  async function handleChatSubmit() {
    updateLoadingState(true)

    try {
      const input = document.getElementById('messageInput') as HTMLInputElement
      const message = input.value.trim()

      if (!message) return

      // Add user message
      const userMessage: ChatMessage = {
        role: 'user',
        content: message,
        timestamp: new Date(),
      }

      chatHistory.push(userMessage)
      addMessageToChat(userMessage)
      input.value = ''

      // Send message to AI and get response
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message,
          visitor,
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(
          errorData.details || errorData.error || 'Failed to get response'
        )
      }

      const aiResponse = await response.json()
      const assistantMessage: ChatMessage = {
        role: 'assistant',
        content: aiResponse.message,
        timestamp: new Date(),
      }

      chatHistory.push(assistantMessage)
      addMessageToChat(assistantMessage)
    } catch (error) {
      console.error('Failed to get AI response:', error)
      alert(
        'An error occurred while processing your request. Please try again later.'
      )
    } finally {
      updateLoadingState(false)
    }
  }

  // Update event listener for chat form submission
  document.getElementById('chatForm')?.addEventListener('submit', async (e) => {
    e.preventDefault()
    await handleChatSubmit()
  })

  document
    .getElementById('endChatBtn')
    ?.addEventListener('click', handleChatEnd)

  function formatPhoneNumber(value: string): string {
    // Strip all non-numeric characters except leading +
    const cleaned = value.replace(/[^\d+]/g, '')

    // If it's 11 digits and starts with 1, format with country code
    if (cleaned.length === 11 && cleaned.startsWith('1')) {
      return `+1 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7)}`
    }

    // If it's 10 digits, format normally
    if (cleaned.length === 10) {
      return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`
    }

    // If it starts with + and has enough digits, assume international
    if (cleaned.startsWith('+') && cleaned.length >= 11) {
      const countryCode = cleaned.slice(0, cleaned.length - 10)
      const number = cleaned.slice(-10)
      return `${countryCode} (${number.slice(0, 3)}) ${number.slice(3, 6)}-${number.slice(6)}`
    }

    // Return cleaned input if no format matches
    return cleaned
  }

  // Update blur handler
  document.getElementById('visitorPhone')?.addEventListener('blur', (e) => {
    const input = e.target as HTMLInputElement
    const value = input.value.trim()

    // If empty, don't format
    if (!value) return

    // If starts with +, preserve it during cleaning
    const hasPlus = value.startsWith('+')
    const cleaned = value.replace(/[^\d]/g, '')

    // Add + back if it was there
    const formatted = formatPhoneNumber(hasPlus ? `+${cleaned}` : cleaned)
    input.value = formatted
  })

  // Update the input handler to limit digits
  document.getElementById('visitorPhone')?.addEventListener('input', (e) => {
    const input = e.target as HTMLInputElement
    const value = input.value

    // Allow + only at the start, followed by numbers
    const cleaned = value
      .replace(/[^\d+]/g, '')
      .replace(/([+])?([^+]*)/, (_, p1, p2) => {
        if (p1) return p1 + p2.replace(/[+]/g, '')
        return p2
      })

    // If starts with +, allow 12 digits (+ and 11 numbers)
    // Otherwise, allow 11 digits max
    const maxLength = cleaned.startsWith('+') ? 12 : 11

    input.value = cleaned.slice(0, maxLength)
  })
</script>
